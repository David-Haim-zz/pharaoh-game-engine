
/*! $Id$
 *  @file   PgeTileGameState.cpp
 *  @author Chad M. Draper
 *  @date   November 17, 2008
 *  @brief  A game state that is based around a tile map.
 *
 */

#ifndef PGETILEGAMESTATE_H
#define PGETILEGAMESTATE_H

#include "PgePlatform.h"
#include "PgeTypes.h"
#include "PgeBaseGameState.h"
#include "PgeTileMap.h"
#include "PgeViewport.h"

#if PGE_PLATFORM == PGE_PLATFORM_WIN32
#   include <windows.h>
#endif

#include <gl/gl.h>

class TiXmlNode;

namespace PGE
{
    /** @class TileGameState
        The base game state is fairly abstract and can be customized for just
        about any style of game state.  Since much of the engine will involve
        tile maps, it makes sense to provide a state capable of loading and
        rendering the map.  This class will need to be further subclassed to
        handle the input by the final state class.
    */
    class _PgeExport TileGameState : public BaseGameState
    {
    public:
        TileGameState();
        virtual ~TileGameState();

        /** Initialize the game state.  This is where any loading of config
            files or creation of objects should occur.
        */
        virtual void Init();

        /** Prepare the frame for rendering after an elapsed period of time.
            This should not actually perform the rendering (that needs to be
            called later.)  Instead, this move objects to their necessary
            positions, updates any AI, etc.
        */
        virtual void Update( PGE::Real32 elapsedMS );

        /** Render the current frame. */
        virtual void Render();

        /** Set the position and size of the display */
        virtual void SetWindowSize( PGE::UInt32 w, PGE::UInt32 h );

        /** Load data from an xml file generated by TileStudio */
        virtual void LoadTileStudioXML( const String& fileName );

    protected:

        String      mTextureName;
        Point2Df    mVelocity;
        Point2Df    mPosition;
        Real        mAngle;
        UInt32      mWidth, mHeight;
        Viewport    mViewport;
        TileMapCollection mTileMapCollection;

        /** Read a project block from a tile map file */
        void ReadProject( TiXmlNode* projNode, const String& baseDir );

    private:
        GLuint      mTexID;
    };

} // namespace PGE

#endif // PGETILEGAMESTATE_H
